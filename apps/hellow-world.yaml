# apiVersion: v1
# kind: Service
# metadata:
  # name: hello-world
  # labels:
    # app: hello-world
# spec:
  # ports:
  # - port: 80
    # name: http
  # selector:
    # app: hello-world
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world
spec:
  selector:
    matchLabels:
      app: hello-world
  replicas: 1
  template:
    metadata:
      labels:
        app: hello-world
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
    spec:
      containers:
      - name: hello-world
        image: infrastructureascode/hello-world:latest
        ports:
          - name: http
            containerPort: 8080
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: hello-world
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hello-world
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      # scale up if usage is above
      # 99% of the requested CPU (100m)
      targetAverageUtilization: 99
---
apiVersion: flagger.app/v1beta1
kind: Canary
metadata:
  name: hello-world
  namespace: test
spec:
  # deployment reference
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: hello-world
  # the maximum time in seconds for the canary deployment
  # to make progress before it is rollback (default 600s)
  progressDeadlineSeconds: 60
  # HPA reference (optional)
  autoscalerRef:
    apiVersion: autoscaling/v2beta1
    kind: HorizontalPodAutoscaler
    name: hello-world
  service:
    # service port number
    port: 80
    # container port number or name (optional)
    targetPort: 8080
    # Istio gateways (optional)
    gateways:
    - public-gateway.istio-system.svc.cluster.local
    # Istio virtual service host names (optional)
    # hosts:
    # - app.example.com
    # Istio traffic policy (optional)
    trafficPolicy:
      tls:
        # use ISTIO_MUTUAL when mTLS is enabled
        mode: DISABLE
    # Istio retry policy (optional)
    retries:
      attempts: 3
      perTryTimeout: 1s
      retryOn: "gateway-error,connect-failure,refused-stream"
  analysis:
    # schedule interval (default 60s)
    interval: 1m
    # max number of failed metric checks before rollback
    threshold: 5
    # max traffic percentage routed to canary
    # percentage (0-100)
    maxWeight: 50
    # canary increment step
    # percentage (0-100)
    stepWeight: 10
    metrics:
    # - name: request-success-rate
    - name: promhttp_metric_handler_requests_total
      # minimum req success rate (non 5xx responses)
      # percentage (0-100)
      thresholdRange:
        min: 99
      interval: 1m
    # - name: latency
      # templateRef:
        # name: latency
        # namespace: istio-system
      # thresholdRange:
        # max: 0.500
      # interval: 1m
    # testing (optional)
    # webhooks:
      # - name: acceptance-test
        # type: pre-rollout
        # url: http://flagger-loadtester.test/
        # timeout: 30s
        # metadata:
          # type: bash
          # cmd: "curl -sd 'test' http://podinfo-canary:9898/token | grep token"
      # - name: load-test
        # url: http://flagger-loadtester.test/
        # timeout: 5s
        # metadata:
          # cmd: "hey -z 1m -q 10 -c 2 http://podinfo-canary.test:9898/"
# ---
# apiVersion: flagger.app/v1beta1
# kind: MetricTemplate
# metadata:
  # name: latency
  # namespace: istio-system
# spec:
  # provider:
    # type: prometheus
    # address: http://prometheus.istio-system:9090
  # query: |
    # histogram_quantile(
        # 0.99,
        # sum(
            # rate(
                # istio_request_duration_seconds_bucket{
                    # reporter="destination",
                    # destination_workload_namespace="{{ namespace }}",
                    # destination_workload=~"{{ target }}"
                # }[{{ interval }}]
            # )
        # ) by (le)
    # )
